project.apply plugin: 'cc-register'
def dependencyMode = (project.gradle.gradleVersion as float) >= 5.3F ? 'api' : 'compile'
//def dependencyMode = GradleVersion.version(project.gradle.gradleVersion) >= GradleVersion.version('5.3') ? 'api' : 'compile'
project.dependencies.add(dependencyMode, "com.billy.android:cc:2.1.5")


repositories {
    maven { url rootProject.file("repo-local") }
    maven { url "${artifactory_contextUrl}/${artifactory_snapshot_repoKey}" }
    maven { url "${artifactory_contextUrl}/${artifactory_release_repoKey}" }
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
}

dependencies {
    //2018-06-03新增：这里是为了示例添加全局拦截器
    if (project.ext.has('runAsApp') && project.ext.runAsApp) {
        //说明：需要兼容的情况有3种(单独组件作为app运行、打包在主app内、组件在多个app上复用但全局拦截器不同)
        //     为了兼容以上3种情况，建议将全局拦截器作为一个单独的module，在此处给不同app添加不同拦截器module
//        implementation project(':demo_interceptors')

    }
}

//也可以按照上述格式继续添加你自己的自动注册需求，俗称：搭顺风车
ccregister.registerInfo.add(
        [
          'scanInterface'        : 'com.klcw.app.lib.recyclerview.IFloorHolderFactory'
        , 'scanSuperClasses'     : ['com.klcw.app.lib.recyclerview.BaseFloorHolderFactory']
        , 'codeInsertToClassName': 'com.klcw.app.lib.recyclerview.FloorViewHolderMaker'
        , 'registerMethodName'   : 'registerFloorFactory'
        ]
)

ccregister.registerInfo.add(
        [
                  'scanInterface'        : 'bl.web.function.register.IFunctionRegisterManager'
                , 'codeInsertToClassName': 'com.klcw.app.web.FunctionRegister'
                , 'registerMethodName'   : 'autoRegisterFunction'
        ]
)


